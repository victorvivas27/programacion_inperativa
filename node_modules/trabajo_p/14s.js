//A partir de el siguiente array de edades nos solicitan realizar lo siguiente:
const edades = [11, 12, 15, 18, 25, 22, 10, 33, 18, 5];
// console.table(edades)
// console.log('***********************');
//1)Obtener en un nuevo array las edades menores a 18.

function menores(array) {
    let MenoresA18 = []
    for (let i = 0; i < array.length; i++) {
        if (array[i] < 18) {
            MenoresA18.push(array[i])
        }
    }
    return MenoresA18
}
//console.log(menores(edades)) // [11, 12, 15, 10, 5]

//Obtener en un nuevo array las edades mayor o igual a 18.
function mayorIgual(array) {
    let mayorIgual18 = []
    for (let i = 0; i < array.length; i++) {
        if (array[i] >= 18) {
            mayorIgual18.push(array[i])
        }
    }
    return mayorIgual18
}
//console.log(mayorIgual(edades)) // [18, 25, 22, 33, 18]

//Obtener en un nuevo array las edades igual a 18.
function igual(array) {
    let igualA18 = []
    for (let i = 0; i < array.length; i++) {
        if (array[i] === 18) {
            igualA18.push(edades[i])
        }
    }
    return igualA18
}
//console.log(igual(edades))//[18,18]

//Obtenerla  menor edad .

function elMenor(arrayEdades) {
    let menor = arrayEdades[0]
    for (let i = 1; i < arrayEdades.length; i++) {
        if (arrayEdades[i] < menor) {
            //console.log(arrayEdades[i])
            menor = arrayEdades[i]

        }
    }
    return menor
}

//console.log(elMenor(edades))


//Obtener el promedio de edades.
//Obtener el mayor.
const edadadPromedio = (arrayEdades) => {
    let sumatoria = 0
    for (let i = 0; i < arrayEdades.length; i++) {
        sumatoria = sumatoria + arrayEdades[i]
    }
    return sumatoria / arrayEdades.length
}
//console.log(edadadPromedio(edades))


//Incrementar en 1 todas las edades.
const edadesIncrementadas = (arrayEdades) => {
    let edadesSumar = []
    for (let i = 0; i < arrayEdades.length; i++) {
        edadesSumar.push(arrayEdades[i] + 1);
    }
    return edadesSumar
}
//console.table( edadesIncrementadas (edades))


/*Tenemos como base un array de cuentas bancarias, donde a cada una la representamos con un objeto literal. A partir de este array trabajaremos sobre los siguientes enunciados, resolviendo de la forma que nos parezca más adecuada*/
const arrayCuentas =
    [
        {
            titular: "Arlene Barr",
            estaHabilitada: false,
            saldo: 12.40,
            edadTitular: 33,
            tipoCuenta: "sueldo"
        },
        {
            titular: "Roslyn Torres",
            estaHabilitada: false,
            saldo: 3229.45,
            edadTitular: 27,
            tipoCuenta: "sueldo"
        },
        {
            titular: "Cleo Lopez",
            estaHabilitada: true,
            saldo: 1360.19,
            edadTitular: 34,
            tipoCuenta: "corriente"
        },
        {
            titular: "Daniel Malone",
            estaHabilitada: true,
            saldo: 3627.12,
            edadTitular: 30,
            tipoCuenta: "sueldo"
        },
        {
            titular: "Ethel Leon",
            estaHabilitada: true,
            saldo: 1616.52,
            edadTitular: 34,
            tipoCuenta: "sueldo"
        },
        {
            titular: "Harding Mitchell",
            estaHabilitada: true,
            saldo: 1408.68,
            edadTitular: 25,
            tipoCuenta: "corriente"
        }
    ]
console.table(arrayCuentas);

//1)Obtener un nuevo array de cuentas cuyas edades sean menores a 30.
function CuentasMenoresA30(array) {
    let cuentasMenoresA30 = []

    for (let i = 0; i < array.length; i++) {
        if (array[i].edadTitular < 30) {
            cuentasMenoresA30.push(array[i])
        }
    } return cuentasMenoresA30
}
//console.table(CuentasMenoresA30(arrayCuentas))

//2)Obtener un nuevo array de cuentas cuyas edades sean mayor o igual a 30.


function cuentaMayoresA30(array) {
    const mayoresA30 = []
    for (let i = 0; i < array.length; i++) {

        if (array[i].edadTitular >= 30) {
            mayoresA30.push(array[i])
        }
    } return mayoresA30
}

//console.table(cuentaMayoresA30(arrayCuentas))




//5)Obtener un array con las cuentas habilitadas.
function cuentasHabilitadas(array) {
    let cuentasHab = []
    for (let i = 0; i < array.length; i++) {
        if (array[i].estaHabilitada) {
            cuentasHab.push(array[i])
        }
    }
    return cuentasHab
}
//console.table(cuentasHabilitadas(arrayCuentas))

//6)Obtener un array con las cuentas deshabilitadas.
function cuentasDesabilitadas(array) {
    let cuentas = []
for (let i = 0; i < array.length; i++) {
    if (array[i].estaHabilitada === false) {
        cuentas.push(array[i])
    }
}return cuentas 
}
console.table(cuentasDesabilitadas(arrayCuentas))

//7)Obtener la cuenta con el menor saldo.
//8)Obtener la cuenta con el mayor saldo.


function menorMayorSaldo(array) {
    let cuentaMenorSaldo = array[0];
    let cuentaMayorSaldo = array[0];
    for (let i = 1; i < array.length; i++) {
        if (array[i].saldo < cuentaMenorSaldo.saldo) {
            cuentaMenorSaldo = array[i];
        }
        else if (array[i].saldo > cuentaMayorSaldo.saldo) {
            cuentaMayorSaldo = array[i];
        }
    } return {
        cuentaMenorSaldo: cuentaMenorSaldo,
        cuentaMayorSaldo: cuentaMayorSaldo
    };
}
//console.table(menorMayorSaldo(arrayCuentas));
//EXTRA:
//1)Desarrollar una función llamada generarID que reciba como parámetro el array de cuentas y agregue a cada elemento (objeto literal) una propiedad llamada id con un valor Numérico
function generarID(arrayCuentas) {
    for (let i = 0; i < arrayCuentas.length; i++) {
        arrayCuentas[i].id = i + 1
    }
}
generarID(arrayCuentas)
//console.log(arrayCuentas)

/*2)Desarrollar una función llamada buscarPorId que reciba como parámetro el array de cuentas y un id, en caso de encontrar retornar la cuenta (él objeto literal completo), caso contrario retornar null*/
function buscarPorId(arrayCuentas, id) {
    for (let i = 0; i < arrayCuentas.length; i++) {
        if (arrayCuentas[i].id === id) {
            return arrayCuentas[i]
        }
    }
    return null
}
//console.log(buscarPorId(arrayCuentas,5))

/*3)Desarrollar una función llamada filtrarPorSaldos que reciba como parámetro el array de cuentas y un saldo (Number), deberá retornar un array que se cuyas cuentas se encuentren por debajo del saldo enviado por parámetro*/
function filtrarPorSaldos(arrayCuentas, saldoMaximo) {
    const cuentasFiltradas = []
    for (let i = 0; i < arrayCuentas.length; i++) {
        if (arrayCuentas[i].saldo < saldoMaximo) {
            cuentasFiltradas.push(arrayCuentas[i]);
        }
    }
    return cuentasFiltradas;
}
//console.log(filtrarPorSaldos( arrayCuentas, 2000))

/*4)Desarrollar una función llamada incrementarSaldo que reciba como parámetro el array de cuentas, un id y un saldo, deberá incrementar él saldo de la cuenta, en caso de encontrar, caso contrario retornar undefined Reutilizando la función  buscarPorId*/

function incrementarSaldo(arrayCuentas, id, saldoIncremento) {
    let cuentaEncontrada = buscarPorId(arrayCuentas, id);
    if (cuentaEncontrada) {
        cuentaEncontrada.saldo += saldoIncremento;
        return cuentaEncontrada;
    }
    return undefined;
}

  // Ejemplo de uso
  //const cuentaIncrementada = incrementarSaldo(arrayCuentas, 2, 500);
  //console.log(cuentaIncrementada);