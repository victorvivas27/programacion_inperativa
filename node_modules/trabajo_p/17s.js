/**
 * 1)Declara una variable que contenga una matriz
 * de 5x5 llena de puros numeros enteros y positivos
 */ const matrizA = [
    [35, 67, 34, 23, 09, 78],
    [76, 23, 65, 34, 12, 65],
    [87, 23, 58, 12, 02, 09],
    [76, 09, 12, 14, 98, 08],
    [85, 08, 15, 87, 90, 32],
    [32, 09, 12, 34, 56, 24]
]
//matrizA[5][5] = 'x'
//console.table(matrizA)
/**
 * 1)Luego, escribe un algoritmo para sumar todos
 * los numeros en la matriz.
 */
function sumaArray(matriz) { //SE CREA LA FUNCION 
    let suma = 0            //AQUI ACOMULADOR
    for (let i = 0; i < matriz.length; i++) { // SE UTILIZA PARA ITERAR SOBRE CADA FILA DE LA MATRIZ
        for (let j = 0; j < matriz[i].length; j++) { //SE UTILIZA PARA SEGUIR LA PISTA DEL INDICE DEL ELEMENTO ACTUAL
            suma = suma + matriz[i][j] //AQUI SUMA EL ELMENTO ACTUAL A LA VARIABLE SUMA 
        }
    }
    return suma
}
//console.log(sumaArray(matrizA))
// 2) Crear una función que genere una matriz de 10x10. Cada fila debe tener solo 10
// números.

function generarMatriz10por10(filas, columnas) {
    let matriz = []
    let cont = 1
    for (let i = 0; i < filas; i++) {
        matriz.push([])
        for (let j = 0; j < columnas; j++) {
            matriz[i].push(cont)
            cont++
        }
    }
    return matriz
}
//console.table(generarMatriz10por10(10, 10))
let matriz = generarMatriz10por10(10, 10)

// 3) Por último, vamos a generar dos funciones:
// a) Una va a sumar los valores en la diagonal marcada en rojo.
// b) La otra va a marcar los valores de la diagonal marcada en verde.
// Ambas funciones deben devolver un resultado único.

function sumaDiagonalVerde(matriz) {
    let suma = 0
    for (let i = 0; i < matriz.length; i++) {
        suma += matriz[i][i]
    }
    return suma
}

//console.log(sumaDiagonalRojo(matriz))
function sumaDiagonalRojo(matriz) {
    let suma = 0
    for (let i = 0; i < matriz.length; i++) {
        suma += matriz[i][matriz.length - 1 - i]
    }
    return suma
}
//console.log(sumaDiagonalRojo(matriz))
function marcarDiagonalVerde(matriz) {
    for (let i = 0; i < matriz.length; i++) {
        for (let j = 0; j < matriz[i].length; j++) {
            if (i + j === matriz.length - 1) {
                matriz[i][j] = "X"
                matriz[i][i] = "X"
                }
            }
        }
    return matriz;
}

//console.table(marcarDiagonalVerde(matriz))


function crearMatrizAleatroria(min, max, numFilas, numColumnas) {
    let matriz = [];
    for (let i = 0; i < numFilas; i++) {
        matriz.push([]);
        for (let j = 0; j < numColumnas; j++) {
            matriz[i].push(Math.floor(Math.random() * (max - min) + min))
        };
    };
    return matriz
};
console.table(crearMatrizAleatroria(1,30, 10, 10));

// let matriz = []; - Crea una matriz vacía que se llenará con los números aleatorios más tarde.
// for (let i = 0; i < numFilas; i++) { - Itera a través de cada fila de la matriz.
// matriz.push([]); - Agrega una fila vacía a la matriz.
// for (let j = 0; j < numColumnas; j++) { - Itera a través de cada columna de la matriz actual.
// matriz[i].push(Math.floor(Math.random() * (max - min) + min)) - Agrega un número aleatorio entre min y max a la columna actual de la fila actual.
// } - Termina el bucle for interno que itera a través de las columnas.
// } - Termina el bucle for externo que itera a través de las filas.
// return matriz; - Devuelve la matriz completa con números aleatorios.
// En resumen, esta función utiliza dos bucles for para construir una matriz aleatoria con números enteros que están entre los valores min y max. La matriz se crea con el número de filas y columnas especificadas en los parámetros numFilas y numColumnas. Cada celda de la matriz se llena con un número aleatorio utilizando la función Math.random(), que devuelve un número aleatorio entre 0 y 1. Se multiplica este número por la diferencia entre max y min, y se le suma min para obtener un número aleatorio entre min y max. Luego, se redondea el número hacia abajo utilizando la función Math.floor() antes de agregarlo a la matriz.